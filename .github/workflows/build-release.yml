name: Build and release x64 and ARM deb packages

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: fix permissions
        run: chmod +x *.sh

      - name: set environment variables for common use and gRPC
        run: |
          source ./01_set_env_vars_common_grpc.sh
          echo "TAG_FILENAME=${TAG_FILENAME}" >> $GITHUB_ENV
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "BASE_DIR=${BASE_DIR}" >> $GITHUB_ENV
          echo "SYSROOT_PREFIX=${SYSROOT_PREFIX}" >> $GITHUB_ENV
          echo "CROSS_COMPILER_ROOT=${CROSS_COMPILER_ROOT}" >> $GITHUB_ENV
          echo "TOOLCHAIN_FILE=${TOOLCHAIN_FILE}" >> $GITHUB_ENV
          echo "GRPC_CPACK_CONFIG_FILE=${GRPC_CPACK_CONFIG_FILE}" >> $GITHUB_ENV
          echo "GUEST_INSTALL_PREFIX=${GUEST_INSTALL_PREFIX}" >> $GITHUB_ENV
          echo "HOST_INSTALL_PREFIX=${HOST_INSTALL_PREFIX}" >> $GITHUB_ENV
          echo "GRPC_SOURCE_DIR=${GRPC_SOURCE_DIR}" >> $GITHUB_ENV
          echo "GRPC_HOST_BUILD_DIR=${GRPC_HOST_BUILD_DIR}" >> $GITHUB_ENV
          echo "GRPC_GUEST_BUILD_DIR=${GRPC_GUEST_BUILD_DIR}" >> $GITHUB_ENV
          echo "CROSS_COMPILER_PACKAGE_FILE=${CROSS_COMPILER_PACKAGE_FILE}" >> $GITHUB_ENV
          echo "CROSS_COMPILER_BASE_URL=${CROSS_COMPILER_BASE_URL}" >> $GITHUB_ENV
          echo "CROSS_COMPILER_RELATIVE_URL=${CROSS_COMPILER_RELATIVE_URL}" >> $GITHUB_ENV
          echo "GRPC_PACKAGE_VERSION=${GRPC_PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "GRPC_HOST_PACKAGE_NAME=${GRPC_HOST_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "GRPC_HOST_DEBIAN_PACKAGE_NAME=${GRPC_HOST_DEBIAN_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "GRPC_SYSROOT_PACKAGE_NAME=${GRPC_SYSROOT_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "GRPC_GUEST_PACKAGE_NAME=${GRPC_GUEST_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "GRPC_GUEST_DEBIAN_PACKAGE_NAME=${GRPC_GUEST_DEBIAN_PACKAGE_NAME}" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: check out grpc
        run: ./02_checkout_grpc.sh

      - name: set environment variables for zlib
        run: |
          source ./03_set_env_vars_zlib.sh
          echo "ZLIB_CPACK_CONFIG_FILE=${ZLIB_CPACK_CONFIG_FILE}" >> $GITHUB_ENV
          echo "ZLIB_SOURCE_DIR=${ZLIB_SOURCE_DIR}" >> $GITHUB_ENV
          echo "ZLIB_GUEST_BUILD_DIR=${ZLIB_GUEST_BUILD_DIR}" >> $GITHUB_ENV
          echo "ZLIB_SYSROOT_BUILD_DIR=${ZLIB_SYSROOT_BUILD_DIR}" >> $GITHUB_ENV
          echo "ZLIB_PACKAGE_VERSION=${ZLIB_PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "ZLIB_SYSROOT_PACKAGE_NAME=${ZLIB_SYSROOT_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "ZLIB_GUEST_PACKAGE_NAME=${ZLIB_GUEST_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "ZLIB_GUEST_DEBIAN_PACKAGE_NAME=${ZLIB_GUEST_DEBIAN_PACKAGE_NAME}" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: install prerequisites
        run: ./04_install_prerequisites.sh

      - name: build gRPC for host (x64)
        run: ./05_build_grpc_amd64.sh

      - name: install gRPC for host (x64)
        run: ./06_install_grpc_amd64.sh

      - name: build zlib for guest (ARM)
        run: ./07_build_zlib_armhf.sh

      - name: install zlib in host sysroot for ARM
        run: ./08_install_zlib_sysroot.sh

      - name: build gRPC for guest (ARM)
        run: ./09_build_grpc_armhf.sh

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}  # replace with github.ref after testing
          release_name: Release ${{ env.TAG }}  # replace with github.ref after testing
          draft: false
          prerelease: false

      - name: Upload GRPC host TGZ package (x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/${{ env.GRPC_HOST_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.GRPC_HOST_PACKAGE_NAME }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload GRPC host DEB package (x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GRPC_HOST_DEBIAN_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.GRPC_HOST_DEBIAN_PACKAGE_NAME }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload GRPC guest TGZ package (ARM)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/${{ env.GRPC_GUEST_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.GRPC_GUEST_PACKAGE_NAME }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload GRPC guest DEB package (ARM)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GRPC_GUEST_DEBIAN_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.GRPC_GUEST_DEBIAN_PACKAGE_NAME }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload GRPC host sysroot TGZ package for ARM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GRPC_SYSROOT_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.GRPC_SYSROOT_PACKAGE_NAME }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload zlib guest TGZ package (ARM)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/${{ env.ZLIB_GUEST_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.ZLIB_GUEST_PACKAGE_NAME }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload zlib guest DEB package (ARM)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.ZLIB_GUEST_DEBIAN_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.ZLIB_GUEST_DEBIAN_PACKAGE_NAME }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload zlib host sysroot TGZ package for ARM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.ZLIB_SYSROOT_PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.ZLIB_SYSROOT_PACKAGE_NAME }}.tar.gz
          asset_content_type: application/gzip
